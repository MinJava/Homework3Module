public class MyLinkedList<E> {

    private class Node {
        public E element;
        public Node next;

        public Node (E element) {
            this.element = element;
            next = null;
        }
        public Node (E element, Node next) {
            this.element = element;
            this.next = next;
        }
        public String toString() {
            return "Node = " + this.element.toString();
        }
    }
    private int size;
    private Node head;
    public MyLinkedList() {
        size = 0;
        head = null;
    }
    private Node getNode (int index) {
        if (index < 0 || index >= size) throw new IndexOutOfBoundsException("Неправильно введён индекс");
        Node node = head;
        for (int i = 0; i < index; i++) {
            node = node.next;
        }
        return node;
    }
    public E get(int index) {
        Node node = getNode(index);
        System.out.println("Элемент индекса " + index + " = " + node.element);
        return node.element;
    }

    public int indexOf(Object obj) {
        Node node = head;
        for (int i = 0; i < size; i++) {
            if (obj.equals(node.element)) return i;
            node = node.next;
        }
        return -1;
    }
    public boolean add(E element) {
        if (size == 0) {
            head = new Node(element);
            size++;
        }
        else {
            Node node = head;
            while (node.next != null) {
                node = node.next;
            }
            node.next = new Node(element);
            size++;
        }
        System.out.println("Добавлен элемент:" + element );
        return true;

    }
    public void add(int index, E element) {
        if (index < 0 || index > size) throw new IndexOutOfBoundsException();
        if (index == 0) {
            head = new Node(element, head);
        }
        else {

            Node node = getNode(index - 1);
            node.next = new Node(element, node.next);
            System.out.println("Добавлен элемент " + element + " с индексом " + index  );
            size++;
        }
    }
    public E remove(int index) {
        if (index < 0 || index >= size) throw new IndexOutOfBoundsException();
        Node node;
        if (index == 0) {
            node = head;
            head =head.next;
        } else if (index == size - 1) {
            node = getNode(index - 1);
            node.next =null;
        } else {
            Node curNode = getNode(index-1);
            node = curNode.next;
            curNode.next =node.next;
        }
        System.out.println("Удален элемент с индексом " + index);
        size--;
        return node.element;

    }
    public boolean removeObj(Object obj) {
        int index = indexOf(obj);
        if (index != -1) {
            remove(index);
            System.out.println("Удаление по элементу");
            return true;
        }
        else return false;
    }


}

    public static void main(String[] args) {
        MyLinkedList linkedList =  new MyLinkedList();
        linkedList.add(32);
        linkedList.add(12);
        linkedList.add(1);
        linkedList.add(8);
        linkedList.add(90);
        linkedList.add(43);
        linkedList.add(2, 11);
        linkedList.indexOf(1);
        linkedList.remove(3);
        linkedList.get(4);
        linkedList.get(2);
        linkedList.removeObj(8);
        linkedList.get(3);
        linkedList.remove(0);
        linkedList.get(0);
    }
